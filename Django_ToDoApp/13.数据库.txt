MySQL Community Server 服务器

服务器里有一些数据库                   
+--------------------+
| Database           |
+--------------------+
| employees          |
| information_schema |
| mysql              |
| performance_schema |
| sys                |
| 测试库             |
+--------------------+

数据库可以有许多表格
+---------------------+
| Tables_in_测试库    |
+---------------------+
| 学生表              |
| 论文表              |
+---------------------+

学生表
+--------+--------+
| 学号   | 姓名   |
+--------+--------+
|      1 | 章羽   |
|      2 | 李思   |
|      3 | 刘华   |
|      4 | 吕江   |
|      5 | 孙谦   |
|     16 | 杨洋   |
+--------+--------+

论文表
+--------------------------------------------------+--------+--------------+
| 论文标题                                         | 得分   | 作者学号     |
+--------------------------------------------------+--------+--------------+
| 中国经济发展新常态研究                           |     60 |            1 |
| 论档案管理与信息化                               |     75 |            1 |
| 引入驾照扣分机制按年考核会计人员                  |     94 |            2 |
| 高校数字图书馆建设探析                           |     98 |            2 |
| 浅谈现代烟草企业的管理创新思路                    |     89 |            4 |
+--------------------------------------------------+--------+--------------+

# ===========================================================================================================
# ===========================================================================================================
# ===========================================================================================================
字典
lst = [
    {'待办事项': '看电影', '已完成': False},
    {'待办事项': '逛街', '已完成': True},
    {'待办事项': '陪客户吃饭', '已完成': False},
]

建表
CREATE TABLE 待办事项表
(
    序号 INT NOT NULL AUTO_INCREMENT,
    待办事项 VARCHAR(100) NOT NULL,
    已完成 tinyint(1) NOT NULL DEFAULT 0,
    PRIMARY KEY (序号) 
)ENGINE=InnoDB CHARSET=utf8;

表的构成
mysql> DESC 待办事项表;
+--------------+--------------+------+-----+---------+----------------+
| Field        | Type         | Null | Key | Default | Extra          |
+--------------+--------------+------+-----+---------+----------------+
| 序号         | int(11)      | NO   | PRI | NULL    | auto_increment |
| 待办事项     | varchar(100) | NO   |     | NULL    |                |
| 已完成       | tinyint(1)   | NO   |     | 0       |                |
+--------------+--------------+------+-----+---------+----------------+

增加数据
INSERT INTO 待办事项表 (待办事项) VALUES ('看电影');
INSERT INTO 待办事项表 (待办事项) VALUES ('逛街');
INSERT INTO 待办事项表 (待办事项) VALUES ('陪客户吃饭');

查看表
mysql> SELECT * FROM 待办事项表;
+--------+-----------------+-----------+
| 序号   | 待办事项        | 已完成    |
+--------+-----------------+-----------+
|      1 | 看电影          |         0 |
|      2 | 逛街            |         1 |
|      3 | 陪客户吃饭      |         0 |
+--------+-----------------+-----------+

# ===========================================================================================================
# ===========================================================================================================
# ===========================================================================================================

建表 和 增删改查 django都能帮我们搞定

设置数据库连接
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

create Model -> 创建Model类,用来描述表的构成: 有哪些列(待办事项,完成状态,序号...)
                这是给网站开发者看的

makemigrations -> 中文:制作迁移文件,例如:0001_initial.py 也是用来描述表的构成
                    django会利用这个文件来建表改表
                   每次新增model(表) 或者 修改model(表的构成) 都要 makemigrations
                  这是给django自己看的,它用这个文件来建表或修改表

python manage.py sqlmigrate todolist 0001  不会真的建表,只是查看
查看django用 0001_initial.py 文件, 转化成了什么sql语句(不同的数据库服务器,语句不一样)帮我们建表, todolist是app的名字
BEGIN;
--
-- Create model Todo
--
CREATE TABLE "todolist_todo" (
    "id" integer NOT NULL PRIMARY KEY AUTOINCREMENT,
     "thing" varchar(50) NOT NULL,
      "done" bool NOT NULL
);
COMMIT;

migrate -> 中文:迁移,即运行这个文件 0001_initial.py   真正在数据库中建表,或修改表的结构


python manage.py shell

from todolist.models import Todo
Todo.objects.all() -> QuerySet 查询集合 简单理解为表中的所有数据 -> 所有行的集合
__str__  显示更友好,命令行以及admin界面
Todo.objects.count() -> 行的数量

a_row = Todo(thing='逛街', done=False) -> 创建一行数据, 但并未保存
a_row.save() -> 真正保存到库中
a_row.id -> 保存之后才有id(序号)

a_row.thing -> 获取这一行的 thing(待办事项) 的值

Todo.objects.filter(done=False) -> 获取 [[所有]] done 为 False 的行, 即未完成的事项, 结果是个集合
another_row = Todo.objects.get(thing='看电影') -> 获取 thing 为 看电影 的行,仅一行
get不到会报错

another_row.thing = '去超市' -> 修改这一行的thing为 '去超市'
another_row.save() -> 改完别忘了保存

another_row.delete() -> 删除这一行
Todo.objects.all() -> 看看现在有什么

exit()    ctrl+z 回车

Register Models -> 注册model  注册后, 可以通过django自带的app -> admin后台界面来管理表数据


a = Todo.objects.get(id=2)
a.delete()